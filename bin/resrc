#!/bin/bash
FILES_BASE=$HOME/.resrc
BACKUP_DIR=$FILES_BASE/.bkp
CURRENT_USER_FILE=$FILES_BASE/.current_user
cmd=$1

function debug () {
  if [ -n "$RESRC_DEBUG" ]; then echo $@; fi
}

# ensure the base directory is available
function set_up () {
  mkdir -p $FILES_BASE
}

# add a user from github.com
# $1  : username
function add_user () {
  # validate arguments
  if [[ -z "$1" ]]; then
    echo "Invalid arguments"
    usage
    return 1
  fi

  set_up
  username=$1
  user_files=$FILES_BASE/$username
  if [ -d $user_files ]
  then
    echo "User already exists."
    return 1
  fi
  no_dot=$(curl -s -o /dev/null -w "%{http_code}" https://api.github.com/repos/$username/.files)
  [ "$no_dot" == "200" ] && git clone https://github.com/$username/.files.git $user_files

  dot=$(curl -s -o /dev/null -w "%{http_code}" https://api.github.com/repos/$username/.dotfiles)
  [ "$dot" == "200" ] && git clone https://github.com/$username/.dotfiles.git $user_files
}

# remove a user locally
# $1  : username
function rm_user () {
  # validate arguments
  if [[ -z "$1" ]]; then
    echo "Invalid arguments"
    usage
    return 1
  fi

  username=$1
  user_files=$FILES_BASE/$username
  backup_dir=$FILES_BASE/.bkp
  if [ -L $user_files ]; then
    rm $user_files
  else
    mkdir -p $BACKUP_DIR
    user_bkp_dir=$BACKUP_DIR/$username_`date +%s`
    mv $user_files $user_bkp_dir
  fi

}

# list out locally available users
function list_users () {
  mkdir -p $FILES_BASE
  ls $FILES_BASE
}

# symlink in a user repo that is already on the loca filesystem.
# useful for working on your dot files locally and testing things out before
# pushing to github.
# $1  : username
# $2  : /path/to/local/repo
function link_user () {
  # validate arguments
  if [[ -z "$1" || -z "$2" || ! -d "$2" ]]; then
    echo "Invalid arguments"
    usage
    return 1
  fi

  set_up

  username=$1
  pushd $2
  dir=`pwd`
  popd
  user_files=$FILES_BASE/$username
  if [ -d $user_files ]
  then
    echo "User already exists."
    return 1
  fi
  ln -s $dir $user_files
}

function clean_home () {
  # cleanup old links
  HOME_FILES=$HOME/.[a-z]*
  for f in $HOME_FILES
  do
    if [ -L $f ]; then
      linked_file=$(readlink $f)
      debug $f  $linked_file  $FILES_BASE
      [[ $linked_file == $FILES_BASE* ]] && rm $f
    fi
  done
}

function unbecome_user () {
  clean_home

  # if there isn't a backup, then just return
  if [[ ! -d $BACKUP_DIR ]]; then
    debug "no $BACKUP_DIR, returning"
    return
  fi

  # if the backup dir is empty, then just return
  files=$(shopt -s nullglob; shopt -s dotglob; echo $BACKUP_DIR/*)
  debug $files
  if [ ! ${#files} -gt 0 ]; then
    debug "$BACKUP_DIR is empty, returning"
    return
  fi


  debug "was .bkp dir, continuing"
  mkdir -p $BACKUP_DIR

  PREV_FILES=$BACKUP_DIR/.[a-z]*
  for f in $PREV_FILES
  do
    filename=$(basename $f)
    homefile=$HOME/$filename
    backup_file=$BACKUP_DIR/$filename
    debug filename: $filename
    debug homefile: $homefile
    debug backup_file: $backup_file

    if [ -f $homefile -o -d $homefile ]; then
      echo "$homefile already exists. Moving it to $homefile.bkp"
      mv $homefile $homefile.bkp
    fi
    cp $backup_file $homefile
  done
}

# set local .files to point to the .files for the specified username. If the
# user is not available locally, they will be cloned from github.
# $1  : username
function become_user () {
  # validate arguments
  if [[ -z "$1" ]]; then
    echo "Invalid arguments"
    usage
    return 1
  fi

  username=$1

  # if that user isn't available locally, add them
  if [[ ! -d $FILES_BASE/$username ]]; then
    echo "User \"$username\" not available locally, adding..."
    resrc add $username
  fi

  # un-become the current user
  unbecome_user

  echo "Becoming \"$username\"..."
  mkdir -p $BACKUP_DIR

  # link in all files
  FILES=$FILES_BASE/$username/.[a-z]*
  for f in $FILES
  do
    filename=$(basename $f)
    homefile=$HOME/$filename
    backup_file=$BACKUP_DIR/$filename
    [ -f $backup_file -o -d $backup_file ] && rm -r $backup_file
    [ -f $homefile -o -d $homefile ] && mv $homefile $backup_file
    [ "$filename" != ".git" ] && ln -s $f $homefile
  done
  echo $username > $CURRENT_USER_FILE
}

function become_user_soft () {
  # NOT USED RIGHT NOW. Changing $HOME messes with too many things (espcially ~)
  username=$1
  echo '' > $RESRC_HOME/.profile
  echo 'export RESRC_HOME=$HOME' >> $RESRC_HOME/.profile
  echo "export HOME=$FILES_BASE/$username" >> $RESRC_HOME/.profile
  echo 'source $HOME/.profile' >> $RESRC_HOME/.profile
  source $RESRC_HOME/.profile
}

function get_current_user () {
  cat $CURRENT_USER_FILE
}

# ssh in and become the current local user on the remote machine
function ssh () {
  debug $@
  RESRC_USER=`get_current_user`
  debug user: $RESRC_USER
  URL=https://raw.github.com/smurthas/resrc/master/bin/resrc
  INSTALL=/usr/local/bin/resrc

  # only do this fancy stuff for very basic ssh commands. We only support
  # "user@host", just "host", or "-i /path/to/key" (followed by either of the
  # first two commands).
  # Otherwise, just drop back to regular ssh
  if [[ $@ =~ ^(-i\ [~./a-zA-Z_0-9]+\ )?([a-zA-Z]+@)?[a-zA-Z0-9.-]+ ]]
  then
    debug "matched!"
    # Before ssh-ing to a shell, try to install resrc and become the user.
    # First we check for resrc, then curl it from github if it not there.
    # Next we check if the user's .files are already install and if not check
    # for git before git cloning them. If git isn't install and the user doesn't
    # want to install it, we'll fallback to scp-ing the files up to the server.
    # Finally, if we have confirmed that resrc is installed and the user is
    # available, we `resrc become` the user, exit out and then ssh back in with
    # a shell
    /usr/bin/ssh $@ "source /etc/profile && { [ -f \$HOME/.profile ] && source \$HOME/.profile || true; } && \
      which resrc > /dev/null || \
      { echo -n \"resrc is not installed on this machine. Do you want to install? [Y/n] \" &&
        read ans && [ \"\$ans\" == \"Y\" -o \"\$ans\" == \"y\" ] &&
        sudo sh -c 'echo Installing resrc... && curl $URL > $INSTALL 2>/dev/null && chmod +x $INSTALL'; } && \
      resrc list | grep $RESRC_USER > /dev/null || \
      which git || \
      { echo -n \"git is not installed on this machine. Do you want to install? [Y/n] \" &&
        read ans && [ \"\$ans\" == \"Y\" -o \"\$ans\" == \"y\" ] &&
        sudo sh -c 'echo Installing git... && apt-get install -y git'; } || exit 125 && \
      resrc become $RESRC_USER";
      code=`echo $?`
      # if the first ssh attempt exits with 125, that's our code to indicate
      # that git wasn't available and the user chose not to install it. Fall
      # back to scp from the local machine
      if [ "$code" == "125" ]; then
        debug "scp-ing"
        scp -r $FILES_BASE/$RESRC_USER $@:.resrc/$RESRC_USER
        /usr/bin/ssh $@ "source /etc/profile && source \$HOME/.profile && \
          resrc become $RESRC_USER";
      fi
      /usr/bin/ssh $@
  else
    debug "no match, just using SSH"
    /usr/bin/ssh $@
  fi
}

# echo the the current user's directory
# $1  : username=`get_current_user`
function user_dir () {
  username=$1
  if [[ -z "$username" ]]; then
    username=`get_current_user`
  fi

  echo $FILES_BASE/$username
}

function usage() {
  echo ""
  echo "  Usage: resrc [command] [options]"
  echo ""
  echo "  Commands:"
  echo ""
  echo "    add <username>        : add a user from github."
  echo "    rm <username>         : remove a user locally."
  echo "    link <username> <dir> : link in a local set of dot files."
  echo "    list                  : list all local users."
  echo "    clean                 : clean all symlinks out of home dir."
  echo "    become <username>     : switch to a user. will install if not present."
  echo "    unbecome              : switch back to backed up .files."
  echo "    ssh <ssh_options>     : ssh into a remote server and become the local user remotely."
  echo "    dir [username]        : echo the direction of local user's .files (defaults to value of $CURRENT_USER_FILE)."
  echo ""
}

case "$cmd" in
  add)
    add_user $2
    ;;
  remove|rm)
    rm_user $2
    ;;
  list|ls)
    list_users
    ;;
  link)
    link_user $2 $3
    ;;
  become)
    become_user $2
    ;;
  unbecome)
    unbecome_user
    ;;
  clean)
    clean_home
    ;;
  ssh)
    shift
    ssh $@
    ;;
  dir)
    shift
    user_dir $@
    ;;
  *)
    echo "Invalid command: $@"
    usage
    exit 1
  ;;
esac
